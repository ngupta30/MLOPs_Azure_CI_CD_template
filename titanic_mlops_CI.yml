stages:
- stage: __default
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: self
        fetchDepth: 1
    - task: UsePythonVersion@0
      displayName: Use Python 3.9
      inputs:
        versionSpec: 3.9
    - task: Bash@3
      displayName: Install python req
      inputs:
        filePath: package_requirement/install_requirements.sh
        workingDirectory: package_requirement
    - task: Bash@3
      displayName: Run test_train
      inputs:
        targetType: inline
        script: pytest training/train_test.py --doctest-modules --junitxml=junit/test-results.xml --cov=data_test --cov-report=xml --cov-report=html
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
    - task: AzureCLI@2
      displayName: 'INstall Azure ML CLI '
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az extension add -n azure-cli-ml
    - task: AzureCLI@2
      displayName: create resource group
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: 'az ml workspace create -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -l $(azureml.location) --exist-ok --yes '
    - task: AzureCLI@2
      displayName: Create Azure ML Compute
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az ml computetarget create amlcompute -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(amlcompute.clusterName) -s $(amlcompute.vmSize) --min-nodes $(amlcompute.minNodes) --max-nodes $(amlcompute.maxNodes) --idle-seconds-before-scaledown $(amlcompute.idleSecondsBeforeScaledown)
    - task: AzureCLI@2
      displayName: 'Upload data repo to Azure blob '
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az ml datastore upload -w $(azureml.workspaceName) -g $(azureml.resourceGroup) -n $(az ml datastore show-default -w $(azureml.workspaceName) -g $(azureml.resourceGroup) --query name -o tsv) -p data -u titatnic --overwrite true
    - task: Bash@3
      displayName: mkdir metadata and mkdir models
      inputs:
        targetType: inline
        script: mkdir metadata && mkdir models
    - task: AzureCLI@2
      displayName: train model
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az ml run submit-script -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -e $(experiment.Name) --ct $(amlcompute.clusterName) -d conda_dependencies.yml -c train_config -t ../metadata/run.json train_aml.py
        cwd: training
    - task: AzureCLI@2
      displayName: model register
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az ml model register -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(model.Name) -f metadata/run.json --asset-path outputs/models/titanic_model.pkl -d "Classification model for Survival prediction" --tag "data"="titanic" --tag "model"="classification" --model-framework ScikitLearn -t metadata/model.json
    - task: AzureCLI@2
      displayName: Download model to buildsourcedire
      inputs:
        connectedServiceNameARM: $(AzDoServiceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az ml model download -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -i$(jq -r .modelId metadata/model.json) -t ./models --overwrite
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory) '
      inputs:
        SourceFolder: '$(Build.SourcesDirectory) '
        Contents: >-
          **/deployment/*

          **/tests/integration/*

          **/package_requirement/*

          **/models/*

          **/training/*

          **/metadata/*
        TargetFolder: '$(Build.ArtifactStagingDirectory) '
    - task: PublishPipelineArtifact@1
      displayName: Publish Pipeline Artifact to landing
      inputs:
        path: '$(Build.ArtifactStagingDirectory) '
        artifactName: landing

